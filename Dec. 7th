https://leetcode.com/problems/lowest-common-ancestor-of-a-binary-tree

class Solution:
    found = False
    ans = None
    
    def lowestCommonAncestor(self, root: 'TreeNode', p: 'TreeNode', q: 'TreeNode') -> 'TreeNode': 
        self.lcaHelper(root, p, q, [])
        return self.ans
        
    def lcaHelper(self, root, p, q, descArr):
        if root and not self.found:
            leftDesc = self.lcaHelper(root.left, p, q, descArr)
            rightDesc = self.lcaHelper(root.right, p, q, descArr)
            descs = leftDesc + rightDesc + [root.val]
            if not self.found and p.val in descs and q.val in descs:
                self.found = True
                self.ans = root
                return []
            else:
                return descs
        return []
